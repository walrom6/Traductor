
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Nov 24 00:04:31 CST 2014
//----------------------------------------------------

package parser;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import javax.swing.*;
import parser.Palabra;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Nov 24 00:04:31 CST 2014
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\037\000\002\003\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\003\000\002\003\004\000\002\004\005" +
    "\000\002\004\006\000\002\004\004\000\002\004\005\000" +
    "\002\004\003\000\002\005\004\000\002\005\004\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\002" +
    "\005\000\002\002\005\000\002\002\004\000\002\002\004" +
    "\000\002\002\003\000\002\006\006\000\002\006\006\000" +
    "\002\006\006\000\002\006\006\000\002\006\006\000\002" +
    "\007\006\000\002\007\007\000\002\007\003\000\002\010" +
    "\005\000\002\010\003\000\002\011\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\041\000\014\011\007\014\011\017\005\024\013\027" +
    "\014\001\002\000\016\002\001\011\007\014\011\017\005" +
    "\024\013\027\014\001\002\000\026\002\ufff5\004\ufff5\011" +
    "\ufff5\012\ufff5\014\ufff5\016\ufff5\017\ufff5\024\ufff5\027\ufff5" +
    "\030\ufff5\001\002\000\004\002\042\001\002\000\012\014" +
    "\011\017\005\024\013\027\017\001\002\000\024\002\ufff8" +
    "\004\033\011\ufff8\014\ufff8\016\016\017\ufff8\024\ufff8\027" +
    "\ufff8\030\034\001\002\000\026\002\ufff3\004\ufff3\011\ufff3" +
    "\012\ufff3\014\ufff3\016\ufff3\017\ufff3\024\ufff3\027\ufff3\030" +
    "\ufff3\001\002\000\016\002\ufffe\011\007\014\011\017\005" +
    "\024\013\027\014\001\002\000\006\014\030\021\027\001" +
    "\002\000\024\002\ufff4\004\ufff4\011\ufff4\014\ufff4\016\016" +
    "\017\ufff4\024\ufff4\027\ufff4\030\ufff4\001\002\000\004\014" +
    "\025\001\002\000\022\004\uffee\012\uffee\014\uffee\017\005" +
    "\021\020\023\022\024\013\027\017\001\002\000\012\004" +
    "\ufff4\012\ufff4\014\ufff4\016\ufff4\001\002\000\010\004\ufff0" +
    "\012\ufff0\014\ufff0\001\002\000\010\004\uffef\012\uffef\014" +
    "\uffef\001\002\000\014\014\011\017\005\021\023\024\013" +
    "\027\017\001\002\000\010\004\ufff1\012\ufff1\014\ufff1\001" +
    "\002\000\010\004\ufff2\012\ufff2\014\ufff2\001\002\000\004" +
    "\004\026\001\002\000\016\002\ufffb\011\ufffb\014\ufffb\017" +
    "\ufffb\024\ufffb\027\ufffb\001\002\000\026\002\ufff6\004\ufff6" +
    "\011\ufff6\012\ufff6\014\ufff6\016\ufff6\017\ufff6\024\ufff6\027" +
    "\ufff6\030\ufff6\001\002\000\026\002\ufff7\004\ufff7\011\ufff7" +
    "\012\ufff7\014\ufff7\016\ufff7\017\ufff7\024\ufff7\027\ufff7\030" +
    "\ufff7\001\002\000\004\002\ufffd\001\002\000\004\004\036" +
    "\001\002\000\016\002\ufffa\011\ufffa\014\ufffa\017\ufffa\024" +
    "\ufffa\027\ufffa\001\002\000\004\004\035\001\002\000\016" +
    "\002\ufff9\011\ufff9\014\ufff9\017\ufff9\024\ufff9\027\ufff9\001" +
    "\002\000\016\002\ufffc\011\ufffc\014\ufffc\017\ufffc\024\ufffc" +
    "\027\ufffc\001\002\000\004\016\016\001\002\000\004\012" +
    "\041\001\002\000\016\002\uffe3\011\uffe3\014\uffe3\017\uffe3" +
    "\024\uffe3\027\uffe3\001\002\000\004\002\000\001\002\000" +
    "\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\041\000\012\003\005\004\003\005\007\011\011\001" +
    "\001\000\012\003\042\004\003\005\007\011\011\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\036\001" +
    "\001\000\004\002\031\001\001\000\002\001\001\000\012" +
    "\003\030\004\003\005\007\011\011\001\001\000\002\001" +
    "\001\000\004\002\014\001\001\000\002\001\001\000\004" +
    "\005\020\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\023\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\002\037\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public void syntax_error(Symbol s){
            System.out.println("Error SintÃ¡ctico en la Linea: " + (s.left +1) + ", Columna: " + (s.right + 1) + 
            " -> Texto: \"" + s.value + "\""); //+"Pila:  " + this.stack);
    }
   
    public void report_fatal_error(String message, Object info) {
        //report_error(message, info);
        //System.exit(1);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


    public static Palabra palabras = new Palabra();
    
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Oracion_Interrogativa ::= Signo_PreguntaAbre Sujeto Predicado Signo_PreguntaCierra 
            {
              Object RESULT =null;
		int preguntaAbreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int preguntaAbreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object preguntaAbre = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int preguntaCierraleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int preguntaCierraright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object preguntaCierra = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Oracion_Interrogativa",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Oracion_Copulativa ::= Oracion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Oracion_Copulativa",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Oracion_Copulativa ::= Oracion Conjuncion Oracion 
            {
              Object RESULT =null;
		int conjuncionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int conjuncionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object conjuncion = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 palabras.ListaPalabras.add((String)conjuncion);
                                                                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Oracion_Copulativa",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Oracion_Yuxtapuesta ::= Oracion_Yuxtapuesta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Oracion_Yuxtapuesta",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Oracion_Yuxtapuesta ::= Sujeto Predicado Articulo Sustantivo Signo_Coma 
            {
              Object RESULT =null;
		int articuloleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int articuloright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object articulo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sustantivoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sustantivoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sustantivo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int comaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int comaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object coma = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 palabras.ListaPalabras.add((String)articulo);
                                                                                                         palabras.ListaPalabras.add((String)sustantivo);
                                                                                                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Oracion_Yuxtapuesta",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Oracion_Yuxtapuesta ::= Sujeto Predicado Sustantivo Signo_Coma 
            {
              Object RESULT =null;
		int sustantivoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sustantivoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sustantivo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int comaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int comaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object coma = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 palabras.ListaPalabras.add((String)sustantivo);
                                                                                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Oracion_Yuxtapuesta",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Oracion_Negativa ::= Sujeto Negacion Predicado Ropa 
            {
              Object RESULT =null;
		int negacionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int negacionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object negacion = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ropaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int roparight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ropa = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 palabras.ListaPalabras.add((String)negacion);
                                                                             palabras.ListaPalabras.add((String)ropa);
                                                                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Oracion_Negativa",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Oracion_Negativa ::= Pronombre Negacion Predicado Ropa 
            {
              Object RESULT =null;
		int pronombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pronombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object pronombre = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int negacionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int negacionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object negacion = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ropaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int roparight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ropa = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 palabras.ListaPalabras.add((String)pronombre);
                                                                                          palabras.ListaPalabras.add((String)negacion);
                                                                                          palabras.ListaPalabras.add((String)ropa);
                                                                                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Oracion_Negativa",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Oracion_Negativa ::= Nombre_Propio Negacion Predicado Ropa 
            {
              Object RESULT =null;
		int nombrePropioleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nombrePropioright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object nombrePropio = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int negacionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int negacionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object negacion = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ropaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int roparight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ropa = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 palabras.ListaPalabras.add((String)nombrePropio);
                                                                                                 palabras.ListaPalabras.add((String)negacion);
                                                                                                 palabras.ListaPalabras.add((String)ropa);
                                                                                              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Oracion_Negativa",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Oracion_Negativa ::= Sujeto Negacion Predicado Signo_PreguntaCierra 
            {
              Object RESULT =null;
		int negacionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int negacionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object negacion = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int preguntaCierraleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int preguntaCierraright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object preguntaCierra = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 palabras.ListaPalabras.add((String)negacion);
                                                                                            palabras.ListaPalabras.add((String)preguntaCierra);
                                                                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Oracion_Negativa",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Oracion_Negativa ::= Sujeto Negacion Predicado Signo_PreguntaCierra 
            {
              Object RESULT =null;
		int negacionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int negacionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object negacion = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int preguntaCierraleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int preguntaCierraright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object preguntaCierra = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 palabras.ListaPalabras.add((String)negacion);
                                                                                            palabras.ListaPalabras.add((String)preguntaCierra);
                                                                                               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Oracion_Negativa",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Predicado ::= Verbo 
            {
              Object RESULT =null;
		int verboleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int verboright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object verbo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 palabras.ListaPalabras.add((String)verbo); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Predicado",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Predicado ::= Verbo Sujeto 
            {
              Object RESULT =null;
		int verboleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int verboright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object verbo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 palabras.ListaPalabras.add((String)verbo); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Predicado",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Predicado ::= Verbo Sustantivo 
            {
              Object RESULT =null;
		int verboleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int verboright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object verbo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sustantivoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sustantivoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sustantivo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 palabras.ListaPalabras.add((String)verbo);
                                                       palabras.ListaPalabras.add((String)sustantivo);
                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Predicado",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Predicado ::= Verbo Preposicion Sustantivo 
            {
              Object RESULT =null;
		int verboleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int verboright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object verbo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int preposicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int preposicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object preposicion = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sustantivoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sustantivoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sustantivo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 palabras.ListaPalabras.add((String)verbo);
                                                                               palabras.ListaPalabras.add((String)preposicion);
                                                                               palabras.ListaPalabras.add((String)sustantivo);
                                                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Predicado",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Predicado ::= Verbo Preposicion Sujeto 
            {
              Object RESULT =null;
		int verboleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int verboright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object verbo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int preposicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int preposicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object preposicion = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 palabras.ListaPalabras.add((String)verbo);
                                                              palabras.ListaPalabras.add((String)preposicion);
                                                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Predicado",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Sujeto ::= Ropa 
            {
              Object RESULT =null;
		int ropaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int roparight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ropa = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 palabras.ListaPalabras.add((String)ropa); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sujeto",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Sujeto ::= Nombre_Propio 
            {
              Object RESULT =null;
		int nombre_propioleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nombre_propioright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nombre_propio = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 palabras.ListaPalabras.add((String)nombre_propio); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sujeto",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Sujeto ::= Pronombre 
            {
              Object RESULT =null;
		int pronombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pronombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object pronombre = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 palabras.ListaPalabras.add((String)pronombre); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sujeto",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Sujeto ::= Articulo Sustantivo 
            {
              Object RESULT =null;
		int articuloleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int articuloright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object articulo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sustantivoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sustantivoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sustantivo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 palabras.ListaPalabras.add((String)articulo);
                                                         palabras.ListaPalabras.add((String)sustantivo);
                                                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sujeto",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Sujeto ::= Articulo Ropa 
            {
              Object RESULT =null;
		int articuloleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int articuloright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object articulo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ropaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int roparight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ropa = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 palabras.ListaPalabras.add((String)articulo);
                                            palabras.ListaPalabras.add((String)ropa);
                                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sujeto",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Oracion ::= Sujeto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Oracion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Oracion ::= Sujeto Identificador Signo_Punto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Oracion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Oracion ::= Sujeto Signo_Punto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Oracion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Oracion ::= Nombre_Propio Predicado Ropa Signo_Punto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Oracion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Oracion ::= Sujeto Predicado Signo_Punto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Oracion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Parrafo ::= Oracion_Interrogativa Parrafo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Parrafo",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Parrafo ::= Oracion_Interrogativa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Parrafo",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Parrafo ::= Oracion Parrafo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Parrafo",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Parrafo EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Parrafo ::= Oracion 
            {
              Object RESULT =null;
		 System.out.println("CÃ³digo analizado");
                         palabras.traducir();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Parrafo",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

